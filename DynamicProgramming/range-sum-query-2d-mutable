class NumMatrix {
    
    int dp[][] = null;
    int matrixcopy[][] = null;
    
    public NumMatrix(int[][] matrix) {
        
        if(matrix.length == 0)
            return;
       
      //  System.out.println(matrix.length);
      //  System.out.println(matrix[0].length);
        
      dp  = new int[matrix.length + 1][matrix[0].length + 1];
       matrixcopy = new int[matrix.length][matrix[0].length];
        
        for(int i = 0 ; i < matrix.length; i++){
            for(int j = 0; j < matrix[0].length; j++){
                matrixcopy[i][j] = matrix[i][j];
            }
        }
        
        for(int i = 0 ; i < matrix.length; i++){
            for(int j = 0; j < matrix[0].length; j++){
                dp[i+1][j+1] = matrix[i][j] + dp[i+1][j] + dp[i][j+1] - dp[i][j];
            }
        }
        
        
    }
    
    public void update(int row, int col, int val) {
        
        int prevval = matrixcopy[row ][col];
        matrixcopy[row ][col] = val;
        int diff = val - prevval;
        
        
        for(int i = row ; i < matrixcopy.length; i++){
            for(int j = col; j < matrixcopy[0].length; j++){
                dp[i+1][j+1] = dp[i+1][j+1] + diff;
            }
        }
        
      
    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
      //  System.out.println(dp[row2 + 1][col2 + 1]);
     //   System.out.println(dp[row1][col1]);
     //   System.out.println(dp[row1][col2+1]);
     //   System.out.println(dp[row2+1][col1]);
        return dp[row2 + 1][col2 + 1] + dp[row1][col1] - dp[row1][col2 + 1] - dp[row2+ 1][col1];
    }
}

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 * obj.update(row,col,val);
 * int param_2 = obj.sumRegion(row1,col1,row2,col2);
 */
