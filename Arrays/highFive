class Solution {
    public int[][] highFive(int[][] items) {
        
    TreeMap<Integer,PriorityQueue<Integer>> scores = new TreeMap<>();
    
        for(int[] item: items){
            int id = item[0];
            int score = item[1];
            if(!scores.containsKey(id)){
                PriorityQueue<Integer> pq = new PriorityQueue<>();
                pq.add(score);
                scores.put(id,pq);
            }else{
              PriorityQueue<Integer> pq = scores.get(id);
              pq.add(score);
              if(pq.size() > 5){
                  pq.poll();
              }
              
              scores.put(id,pq);  
            }
        }
        
        int[][] scoresval = new int[scores.size()][2];
        int i = 0;
        for(Map.Entry<Integer,PriorityQueue<Integer>> entry : scores.entrySet()) {
            int sum = 0;
            int count = 0;
          scoresval[i][0] =  entry.getKey();
          PriorityQueue<Integer> pq = entry.getValue();
          while(pq.size() > 0){
              sum += pq.poll();
              count += 1;
          }
          scoresval[i][1] = sum/count;
            i++;
        }
        
        
        return scoresval;
        
    }
}
