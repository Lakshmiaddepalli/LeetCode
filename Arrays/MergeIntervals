/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> merge(List<Interval> intervals) {

        List<Interval> finallist = new ArrayList<Interval>();
        Collections.sort(intervals, (i1, i2) -> (i1.start) - (i2.start));
        
        for(Interval i: intervals){
        if(finallist.isEmpty() || finallist.get(finallist.size() -1).end < i.start){
            finallist.add(i);
        }
        else{
               int newend = Math.max(finallist.get(finallist.size() -1).end,i.end); 
               finallist.get(finallist.size() -1).end = Math.max(finallist.get(finallist.size() -1).end,i.end);
        }
            
        }
        return finallist;
    }
}


