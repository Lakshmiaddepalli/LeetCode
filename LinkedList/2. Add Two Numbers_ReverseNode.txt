import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

/* -----------------------------------
 *  WARNING:
 * -----------------------------------
 *  Your code may fail to compile
 *  because it contains public class
 *  declarations.
 *  To fix this, please remove the
 *  "public" keyword from your class
 *  declarations.
 */

class ListNode {
	int val;
	ListNode next;

	ListNode(int x) {
		val = x;
	}
}

class Solution {
	public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
		ListNode p = ReverseNode(l1);
		ListNode q = ReverseNode(l2);
		ListNode result = new ListNode(0);
		ListNode r = result;
		int carry = 0;

		while (p != null || q != null) {
			
			int x = (p != null) ? p.val : 0;
			int y = (q != null) ? q.val : 0;
			int sum = x + y + carry;
			carry = sum / 10;
			r.next = new ListNode(sum % 10);
			if(p!=null)
			p = p.next;
			if(q!=null)
			q = q.next;
			r = r.next;
		}

		if (carry > 0) {
			r.next = new ListNode(carry);
		}

		return ReverseNode(result.next);
	}
	
	public ListNode ReverseNode(ListNode n) {
		
		ListNode f = n;
		ListNode reversed = new ListNode(0);
		ArrayList<Integer> reversedvalues = new ArrayList<Integer>();
		ListNode pointreversed = reversed;
		while(f!=null) {
			reversedvalues.add(f.val);
			f = f.next;	
		}
		int sizeoflist = reversedvalues.size();
		while(sizeoflist>0) {
		pointreversed.next = new ListNode(reversedvalues.get(sizeoflist-1));
		sizeoflist--;
		pointreversed = pointreversed.next;
		}
		return reversed.next;
		
		
	}
}

public class MainClass {
	public static int[] stringToIntegerArray(String input) {
		input = input.trim();
		input = input.substring(1, input.length() - 1);
		if (input.length() == 0) {
			return new int[0];
		}

		String[] parts = input.split(",");
		int[] output = new int[parts.length];
		for (int index = 0; index < parts.length; index++) {
			String part = parts[index].trim();
			output[index] = Integer.parseInt(part);
		}
		return output;
	}

	public static ListNode stringToListNode(String input) {
		// Generate array from the input
		int[] nodeValues = stringToIntegerArray(input);

		// Now convert that list into linked list
		ListNode dummyRoot = new ListNode(0);
		ListNode ptr = dummyRoot;
		for (int item : nodeValues) {
			ptr.next = new ListNode(item);
			ptr = ptr.next;
		}
		return dummyRoot.next;
	}

	public static String listNodeToString(ListNode node) {
		if (node == null) {
			return "[]";
		}

		String result = "";
		while (node != null) {
			result += Integer.toString(node.val) + ", ";
			node = node.next;
		}
		return "[" + result.substring(0, result.length() - 2) + "]";
	}

	public static void main(String[] args) throws IOException {
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		String line;
		while ((line = in.readLine()) != null) {
			ListNode l1 = stringToListNode(line);
			line = in.readLine();
			ListNode l2 = stringToListNode(line);

			ListNode ret = new Solution().addTwoNumbers(l1, l2);

			String out = listNodeToString(ret);

			System.out.print(out);
		}
	}
}