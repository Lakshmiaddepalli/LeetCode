class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        
        HashMap<Integer,Integer> hm = new HashMap<Integer,Integer>();
        
        for(int i = 0; i < nums.length; i++){
            if(!hm.containsKey(nums[i]))
                hm.put(nums[i],1);
            else
                hm.put(nums[i],hm.get(nums[i]) + 1);
        }
        
        PriorityQueue<Map.Entry<Integer,Integer>> pq = new PriorityQueue<Map.Entry<Integer,Integer>>(new The_Comparator()); 
            
    for(Map.Entry<Integer,Integer> m: hm.entrySet()){
        pq.add(m);
        if(pq.size() > k){
            pq.poll();
            }
    }
      
    List<Integer> al = new ArrayList<Integer>();
        
    for(Map.Entry<Integer,Integer> m: pq){
        al.add(m.getKey());
    }
      Collections.reverse(al.subList(0, k));  
      return al.subList(0, k);
    }
}




class The_Comparator implements Comparator<Map.Entry<Integer, Integer>> { 

public int compare(Map.Entry<Integer, Integer> o1, Map.Entry<Integer, Integer> o2) { 
    return (o1.getValue()).compareTo(o2.getValue()); 
} 

}
