/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    
    HashMap<Integer,List<Integer>> hm;
    List<List<Integer>> finallist;
    
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
       
        hm = new HashMap<Integer,List<Integer>>();
        finallist = new ArrayList<List<Integer>>();
        
        helper(root,hm,0);
       // System.out.println(hm.toString());
       
        int i = 0;
       
        for(Map.Entry<Integer,List<Integer>> entry : hm.entrySet()){
         if(i%2!=0){
             Collections.reverse(entry.getValue());
         }  
          finallist.add(entry.getValue());
            i++;
        }
        
        return finallist;
    }
    
    public void helper(TreeNode root,HashMap<Integer,List<Integer>> hm,int height){
       
        if(root == null){
            return;
        }
        
        if(!hm.containsKey(height)){
            List<Integer> al = new LinkedList<Integer>();
            al.add(root.val);
            hm.put(height,al);
        }else{
           List<Integer> al = hm.get(height);  
           al.add(root.val);
           hm.put(height,al);
        }
        
        helper(root.left,hm,height+1);
        helper(root.right,hm,height+1);
        
    }
}
